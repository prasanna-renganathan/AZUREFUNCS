trigger:
  branches:
    include:
      - main

variables:
  buildConfiguration: 'Release'
  functionAppName: 'myfuncapp'
  resourceGroupName: 'MyResourceGroup'
  slotName: 'staging'

stages:
  - stage: Build
    displayName: "Build Function App"
    jobs:
      - job: Build
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '8.0.x'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: DotNetCoreCLI@2
            displayName: 'Restore'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'Publish'
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'functionapp'
              publishLocation: 'Container'

  - stage: Deploy_Staging
    displayName: "Deploy to Staging Slot"
    dependsOn: Build
    jobs:
      - deployment: DeployToStaging
        environment: staging
        pool:
          vmImage: 'windows-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  inputs:
                    artifactName: 'functionapp'
                    downloadPath: '$(Pipeline.Workspace)'

                - task: AzureFunctionApp@1
                  displayName: 'Deploy Function App to Staging Slot'
                  inputs:
                    azureSubscriptionName: 'MyAzureServiceConnection'
                    appType: 'functionAppLinux' # or functionAppWindows if Windows
                    appName: '$(functionAppName)'
                    resourceGroupName: '$(resourceGroupName)'
                    deployToSlotOrASE: true
                    slotName: '$(slotName)'
                    package: '$(Pipeline.Workspace)/functionapp/**/*.zip'

  - stage: SwapToProduction
    displayName: "Swap Slots Staging â†’ Production"
    dependsOn: Deploy_Staging
    jobs:
      - job: Swap
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: AzureCLI@2
            displayName: "Swap staging to production"
            inputs:
              azureSubscription: 'MyAzureServiceConnection'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az webapp deployment slot swap \
                  --resource-group $(resourceGroupName) \
                  --name $(functionAppName) \
                  --slot $(slotName) \
                  --target-slot production
